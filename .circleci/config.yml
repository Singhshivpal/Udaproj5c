# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
orbs:
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.12.0
  
# Orchestrate or schedule a set of jobs
      
jobs:
  lint:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |            
            make install
      - run:
          name: run lint
          command: |
            make lint
            
  smoke_test:
    docker : 
      - image :  alpine:latest
    steps:
      - run:
          name: Smoke Tests
          command: |
            if curl -s --head "http://localhost:8080" 
                then
            echo "It worked!"
            else
              echo "failed"
            fi
            
  config-image:
    machine: true
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: Build, test and push docker image
          command: |
            docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PWD}
            docker build -t shiv12234/my-node-app:2.0 .
            docker run -d --rm --name nodeapp -p 8080:8080 shiv12234/my-node-app:2.0
            sleep 10
            docker container ls
            export url="http://localhost:8080"
            export response=$(curl -s $url)
            echo "This is response $response"
            if [[ $response == *"NodeJS app"* ]]; then              
              docker stop nodeapp
            else              
              docker stop nodeapp
              exit 1
            fi
            docker push shiv12234/my-node-app:2.0
            
  create-cluster:
     executor: aws-eks/python3
     parameters:
       cluster-name:
         description: |
           rm-capstone
         type: string
     steps:
       - checkout
       - aws-eks/install-aws-iam-authenticator:
           release-tag: ''
       - run:
           name: Install the eksctl tool
           command: |
             if which eksctl > /dev/null; then
             echo "eksctl is already installed"
             exit 0
             fi
             mkdir -p eksctl_download
             curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
             chmod +x eksctl_download/eksctl
             SUDO=""
             if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
             SUDO="sudo"
             fi
             $SUDO mv eksctl_download/eksctl /usr/local/bin/
             rmdir eksctl_download
       - aws-eks/create-cluster:
           cluster-name: << parameters.cluster-name >>
           skip-kubectl-install: false
           verbose: 3
           node-type: t2.micro
           nodes-max: 2
           ssh-access: false
           ssh-public-key: ''
           
  test-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl get services
          name: Test cluster
            
          
  create-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string

    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: deployment.yml
          resource-name: deployment/my-capstone-deployment
          
  test-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl get svc
            kubectl get nodes
            kubectl get deployment
          name: Test cluster


workflows:
    udacity:
      jobs:
        - lint
        - smoke_test:
            requires:
              - lint
        - config-image:
            requires:
              - smoke_test
        - aws-eks/create-cluster:
            cluster-name: udacity-capstone
            requires:
              - config-image
        - test-cluster:
            cluster-name: udacity-capstone
            requires:
              - aws-eks/create-cluster
        - create-deployment:
            cluster-name:  udacity-capstone
            requires:
              - test-cluster
        - test-deployment:
            cluster-name:  udacity-capstone
            requires:
              - create-deployment              
        - aws-eks/update-container-image:
            cluster-name: udacity-capstone
            container-image-updates: 'my-capstone-deployment=leenabhavnani/my-node-app:2.0'
            get-rollout-status: true
            record: true
            requires:
             - test-deployment
            resource-name:  deployment/my-capstone-deployment            
        
        #- aws-eks/delete-cluster:
        #    cluster-name: udacity-capstone
        #    requires:
        #      - aws-eks/update-container-image
